# Identify 2-3 changes that can be made to our environment to prevent an ssh brute force attack from the internet.
1. We can disable password authentication for SSH to the application server instance. Instead using public-private key pairs for authentication is indeed a common and recommended security practice because:
- Stronger security: More resistant to brute-force attacks.
- No password management.
- Automation: Can be easily automated in scripts and workflows => making it suitable for automated processes.

2. We should set up a rule in the Security Group to control inbound connections. Specifically, configure the rule for SSH to permit connections exclusively from instances that belong to the same Security Group or from known IP addresses because:
- Limiting access: Reduce attack surface, the risk of unauthorized access.
- Defense against external threats: Even if the attackers stoled SSH credentials, they won't be able to access the system unless they connect from whitelisted IP addresses.

3. Network controls, such as subnet and network blocks, should have explicit configurations defining the allowed sources of connections within specific ranges. Utilize only known IP addresses because:
- Enhance security.
- Protect against unauthorized access.

# Neither instance should have had access to the secret recipes bucket, in the even that instance API credentials were compromised how could we have prevented access to sensitive data.
1. We should Utilize The principle of least privilege for the current instance role profile by restricting access solely to specific buckets instead of using a wildcard (*). We can also use bucket policy.
- Granular control: Limiting access to only the necessary resources.
- Enhance security.

2. We should enable server-side encryption on S3 buckets because:
- Data security: Server-side encryption ensures that the data stored in S3 is encrypted at rest => protects sensitive information from unauthorized access.
- Protect against data breaches: In the event of a data breach, encrypted data remains protected and unreadable without the encryption keys => protect sensitive information.